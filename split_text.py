# -*- coding: utf-8 -*-
# autogenerated 2019-01-19 10:52:09.746954


def V(c):
    return c in u"АЕЁИОУЫЭЮЯаеёиоуыэюя"


def C(c):
    return c in u"БВГДЖЗКЛМНПРСТФХЦЧШЩбвгджзклмнпрстфхцчшщ«»"


def S(c):
    return c in u"Йй"


def M(c):
    return c in u"ЪЬъь"


def BEG(c):
    return c == u"["


def END(c):
    return c == u"]"


def split(s):
    cur_pos = 0
    items = list(u"[" + s + u"]")
    while cur_pos < len(items):
        input_context = items[cur_pos:]
        res = apply1(input_context)
        if res is None:
            cur_pos += 1
        else:
            items = items[:cur_pos] + res[0] + input_context[res[1]:]
            cur_pos += res[2]
    return items[1:-1]


def apply1(s):
    if C(s[0]):
        if V(s[1]):
            if C(s[2]):
                if V(s[3]):
                    return ([s[0]+s[1], s[2], s[3]], 4, 1)  # SYLLABER_1

                if C(s[3]):
                    if V(s[4]):
                        # SYLLABER_5
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if C(s[5]):
                            if END(s[6]):
                                # SYLLABER_11
                                return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 1)

                            if not END(s[6]):
                                # SYLLABER_12
                                return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5], s[6]], 7, 1)

                        if V(s[5]):
                            # SYLLABER_36
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if END(s[5]):
                            # SYLLABER_120
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if M(s[5]):
                            if END(s[6]):
                                # SYLLABER_330
                                return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 1)

                    if END(s[4]):
                        # SYLLABER_52
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if M(s[4]):
                        if END(s[5]):
                            # SYLLABER_76
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if V(s[6]):
                                # SYLLABER_250
                                return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5], s[6]], 7, 1)

                        if V(s[5]):
                            # SYLLABER_260
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_6

                if M(s[3]):
                    if C(s[4]):
                        if not END(s[5]):
                            # SYLLABER_13
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if END(s[5]):
                            # SYLLABER_39
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if C(s[6]):
                                if END(s[7]):
                                    # SYLLABER_350
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 1)

                    if END(s[4]):
                        # SYLLABER_14
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if V(s[4]):
                        # SYLLABER_20
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

            if END(s[2]):
                return ([s[0]+s[1], s[2]], 3, 1)  # SYLLABER_7

            if S(s[2]):
                if C(s[3]):
                    if V(s[4]):
                        # SYLLABER_8
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if END(s[5]):
                            # SYLLABER_9
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                    if END(s[4]):
                        # SYLLABER_280
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if M(s[4]):
                        if END(s[5]):
                            # SYLLABER_400
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_10

                return ([s[0]+s[1]+s[2]], 3, 1)  # SYLLABER_64

            if V(s[2]):
                return ([s[0]+s[1], s[2]], 3, 1)  # SYLLABER_31

        if C(s[1]):
            if C(s[2]):
                if V(s[3]):
                    if C(s[4]):
                        if C(s[5]):
                            if V(s[6]):
                                # SYLLABER_2
                                return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5], s[6]], 7, 1)

                            if M(s[6]):
                                if END(s[7]):
                                    # SYLLABER_310
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 1)

                        if END(s[5]):
                            # SYLLABER_3
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if V(s[5]):
                            # SYLLABER_4
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if M(s[5]):
                            if C(s[6]):
                                if M(s[7]):
                                    if END(s[8]):
                                        # SYLLABER_300
                                        return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6]+s[7], s[8]], 9, 1)

                            # SYLLABER_200
                            return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]], 6, 1)

                    if S(s[4]):
                        # SYLLABER_54
                        return ([s[0]+s[1]+s[2]+s[3]+s[4]], 5, 1)

                    if V(s[4]):
                        # SYLLABER_68
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if END(s[4]):
                        # SYLLABER_170
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    return ([s[0]+s[1]+s[2]+s[3]], 4, 1)  # SYLLABER_210

                if C(s[3]):
                    if V(s[4]):
                        if S(s[5]):
                            # SYLLABER_220
                            return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]], 6, 1)

                        # SYLLABER_98
                        return ([s[0]+s[1]+s[2]+s[3]+s[4]], 5, 1)

            if V(s[2]):
                if C(s[3]):
                    if C(s[4]):
                        if V(s[5]):
                            # SYLLABER_15
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if C(s[6]):
                                if END(s[7]):
                                    # SYLLABER_370
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 1)

                            # SYLLABER_80
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if M(s[5]):
                            if V(s[6]):
                                # SYLLABER_340
                                return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 1)

                            if C(s[6]):
                                if V(s[7]):
                                    # SYLLABER_390
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5], s[6], s[7]], 8, 1)

                        if END(s[5]):
                            # SYLLABER_470
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                    if M(s[4]):
                        if not C(s[5]):
                            # SYLLABER_21
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if V(s[6]):
                                # SYLLABER_48
                                return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5], s[6]], 7, 1)

                            if C(s[6]):
                                if V(s[7]):
                                    # SYLLABER_240
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5], s[6], s[7]], 8, 1)

                    if END(s[4]):
                        # SYLLABER_62
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if V(s[4]):
                        # SYLLABER_230
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                if V(s[3]):
                    if C(s[4]):
                        # SYLLABER_17
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_82

                if S(s[3]):
                    if END(s[4]):
                        # SYLLABER_33
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if V(s[5]):
                            # SYLLABER_92
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if C(s[6]):
                                if END(s[7]):
                                    # SYLLABER_450
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 1)

                    return ([s[0]+s[1]+s[2]+s[3]], 4, 1)  # SYLLABER_190

                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_66

            if M(s[2]):
                if V(s[3]):
                    if END(s[4]):
                        # SYLLABER_410
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if V(s[5]):
                            # SYLLABER_480
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

        if M(s[1]):
            if V(s[2]):
                if C(s[3]):
                    if V(s[4]):
                        # SYLLABER_16
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if END(s[5]):
                            # SYLLABER_19
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                        if V(s[5]):
                            # SYLLABER_290
                            return ([s[0]+s[1]+s[2]+s[3], s[4], s[5]], 6, 1)

                        if C(s[5]):
                            if C(s[6]):
                                if V(s[7]):
                                    # SYLLABER_430
                                    return ([s[0]+s[1]+s[2]+s[3]+s[4]+s[5], s[6], s[7]], 8, 1)

                    if END(s[4]):
                        # SYLLABER_22
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_94

            if C(s[2]):
                if V(s[3]):
                    if S(s[4]):
                        if END(s[5]):
                            # SYLLABER_320
                            return ([s[0]+s[1]+s[2]+s[3]+s[4], s[5]], 6, 1)

                    if V(s[4]):
                        # SYLLABER_360
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

    if V(s[0]):
        if C(s[1]):
            if C(s[2]):
                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_18

                if V(s[3]):
                    return ([s[0]+s[1], s[2], s[3]], 4, 1)  # SYLLABER_28

                if C(s[3]):
                    if V(s[4]):
                        if C(s[5]):
                            # SYLLABER_96
                            return ([s[0]+s[1]+s[2], s[3], s[4], s[5]], 6, 1)

                        # SYLLABER_50
                        return ([s[0]+s[1], s[2], s[3], s[4]], 5, 1)

                    if C(s[4]):
                        if V(s[5]):
                            # SYLLABER_460
                            return ([s[0]+s[1]+s[2], s[3], s[4], s[5]], 6, 1)

                if M(s[3]):
                    if END(s[4]):
                        # SYLLABER_72
                        return ([s[0]+s[1]+s[2]+s[3], s[4]], 5, 1)

            if V(s[2]):
                return ([s[0], s[1], s[2]], 3, 1)  # SYLLABER_35

            if M(s[2]):
                if END(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_40

                if C(s[3]):
                    if C(s[4]):
                        if V(s[5]):
                            # SYLLABER_42
                            return ([s[0]+s[1]+s[2], s[3], s[4], s[5]], 6, 1)

                    if V(s[4]):
                        # SYLLABER_84
                        return ([s[0]+s[1]+s[2], s[3], s[4]], 5, 1)

                if V(s[3]):
                    return ([s[0]+s[1]+s[2], s[3]], 4, 1)  # SYLLABER_78

            if END(s[2]):
                return ([s[0]+s[1], s[2]], 3, 1)  # SYLLABER_44

            return ([s[0]+s[1]], 2, 1)  # SYLLABER_56

        if END(s[1]):
            return ([s[0], s[1]], 2, 1)  # SYLLABER_30

        if V(s[1]):
            return ([s[0], s[1]], 2, 1)  # SYLLABER_34

        if S(s[1]):
            if END(s[2]):
                return ([s[0]+s[1], s[2]], 3, 1)  # SYLLABER_46

            if C(s[2]):
                if V(s[3]):
                    return ([s[0]+s[1], s[2], s[3]], 4, 1)  # SYLLABER_180

    if BEG(s[0]):
        if C(s[1]):
            if C(s[2]):
                if V(s[3]):
                    if C(s[4]):
                        if END(s[5]):
                            # SYLLABER_23
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

                        if C(s[5]):
                            if END(s[6]):
                                # SYLLABER_60
                                return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 2)

                            if M(s[6]):
                                if END(s[7]):
                                    # SYLLABER_74
                                    return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 2)

                    if S(s[4]):
                        if END(s[5]):
                            # SYLLABER_24
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

                    if END(s[4]):
                        # SYLLABER_27
                        return ([s[0], s[1]+s[2]+s[3], s[4]], 5, 2)

                if END(s[3]):
                    return ([s[0], s[1]+s[2], s[3]], 4, 2)  # SYLLABER_70

                if C(s[3]):
                    if C(s[4]):
                        if V(s[5]):
                            if C(s[6]):
                                if END(s[7]):
                                    # SYLLABER_88
                                    return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 2)

                    if V(s[4]):
                        if C(s[5]):
                            if M(s[6]):
                                if END(s[7]):
                                    # SYLLABER_90
                                    return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 2)

                        if END(s[5]):
                            # SYLLABER_140
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

            if V(s[2]):
                if C(s[3]):
                    if C(s[4]):
                        if M(s[5]):
                            if END(s[6]):
                                # SYLLABER_26
                                return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 2)

                        if END(s[5]):
                            # SYLLABER_37
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

                    if M(s[4]):
                        if C(s[5]):
                            if C(s[6]):
                                if END(s[7]):
                                    # SYLLABER_440
                                    return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5]+s[6], s[7]], 8, 2)

                if S(s[3]):
                    if C(s[4]):
                        if END(s[5]):
                            # SYLLABER_160
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

            if END(s[2]):
                return ([s[0], s[1], s[2]], 3, 2)  # SYLLABER_32

            if M(s[2]):
                if C(s[3]):
                    if V(s[4]):
                        if END(s[5]):
                            # SYLLABER_58
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

                        if C(s[5]):
                            if END(s[6]):
                                # SYLLABER_100
                                return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 2)

                            if V(s[6]):
                                # SYLLABER_420
                                return ([s[0], s[1]+s[2]+s[3]+s[4], s[5], s[6]], 7, 2)

                if V(s[3]):
                    if END(s[4]):
                        # SYLLABER_86
                        return ([s[0], s[1]+s[2]+s[3], s[4]], 5, 2)

                    if S(s[4]):
                        if END(s[5]):
                            # SYLLABER_110
                            return ([s[0], s[1]+s[2]+s[3]+s[4], s[5]], 6, 2)

                    if C(s[4]):
                        if M(s[5]):
                            if END(s[6]):
                                # SYLLABER_150
                                return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 2)

        if V(s[1]):
            if C(s[2]):
                if M(s[3]):
                    if END(s[4]):
                        # SYLLABER_25
                        return ([s[0], s[1]+s[2]+s[3], s[4]], 5, 2)

                if END(s[3]):
                    return ([s[0], s[1]+s[2], s[3]], 4, 2)  # SYLLABER_29

                if C(s[3]):
                    if C(s[4]):
                        if C(s[5]):
                            if END(s[6]):
                                # SYLLABER_130
                                return ([s[0], s[1]+s[2]+s[3]+s[4]+s[5], s[6]], 7, 2)

        if S(s[1]):
            if V(s[2]):
                if C(s[3]):
                    if V(s[4]):
                        # SYLLABER_380
                        return ([s[0], s[1]+s[2], s[3], s[4]], 5, 2)


# if __name__ == "__main__":
    # sx = split(u"спросил")
    # print(u"|".join(sx))

def split_word(word):
    """
    Split single word to syllables
    :param word: unicode string representing Russian word
    :return: list of unicode strings for syllables
    """
    return split(word)


def split_words(words):
    """
    Split the words in list to contiguous list of sillables and word separators (single space chars)
    :param words: list of words (unicode strings)
    :return: list of tokens - syllables and spaces
    """
    tokens = []
    for word in words:
        sx = split(word)
        if len(tokens) > 0:
            tokens.append(u' ')
        tokens.extend(sx)
    return tokens


# print(split_word('Перпендикулярный'))
