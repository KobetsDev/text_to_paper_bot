#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os
import random
import threading
import time
import zipfile  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
from os.path import basename

import telebot
from telebot import types
from telebot.types import InputMediaPhoto  # , Message

import Buttons
from mainPic import CreatePhoto
from dotenv import load_dotenv


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å


def main():
    bot = telebot.TeleBot(os.environ.get('API_KEY'))

    def thread(func):  # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        def wrapper(*args, **kwargs):
            my_thread = threading.Thread(target=func, args=args, kwargs=kwargs)
            my_thread.start()

        return wrapper
    user = {}
    slovar_ = {}
    default_font_color = '48, 75, 143'
    default_list_type = 'cell'

    def get_user_data(self2):
        self_id = self2.id
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ
        if not self_id in user:
            user[self_id] = {'last_time': 0,
                             'user_name': self2.username,
                             'all_text': '',
                             'text_true': False,
                             'inputs_active': False,
                             'list_type': default_list_type,
                             'font_color': default_font_color,
                             'gif': '',
                             'jdem': '',
                             'font': 'Merkucio',
                             'payments': {},
                             'order': {}}
        return user[self_id]

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        b = bot.send_message(message.from_user.id,
                             f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –Ω–∞–∂–º–∏ ‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å‚óÄÔ∏è –∏ —è –≤—Å—ë —Ç–µ–±–µ —Ç—É—Ç –ø–æ–∫–∞–∂—É.',
                             reply_markup=Buttons.UserKBstart)
        u = message.message_id
        # bot.delete_message(message.chat.id, u)
        bot.delete_message(message.chat.id, u)

    @bot.callback_query_handler(func=lambda call: True)
    def Select_list_type_work(call):
        user_data = get_user_data(call.from_user)
        if 'Select_list_type_work' in call.data:
            if 'Select_list_type_work_1' == call.data:
                user_data["list_type"] = "cell"
                user_data['order']['list'] = '–í –∫–ª–µ—Ç–∫—É'
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤ –∫–ª–µ—Ç–∫—É.')
                # bot.send_message(message.from_user.id, )
            # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏—è VIP >=
            elif 'Select_list_type_work_2' == call.data:  # and user_status[1] >= VIP:
                user_data["list_type"] = "line"
                user_data['order']['list'] = '–í –ª–∏–Ω–∏—é'
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤ –ª–∏–Ω–∏—é.')
        elif 'Select_font' in call.data:
            if 'Select_font_1' == call.data:
                user_data["font"] = "Merkucio"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Merkucio.')
            elif 'Select_font_2' == call.data:
                user_data["font"] = "Abram"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Abram.')
            elif 'Select_font_3' == call.data:  # and user_status[1] >= VIP:
                user_data["font"] = "Gregory"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Gregory.')
            elif 'Select_font_4' == call.data:  # and user_status[1] >= Premium:
                user_data["font"] = "Lorenco"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Lorenco.')
            elif 'Select_font_5' == call.data:  # and user_status[1] >= Premium:
                user_data["font"] = "Merk"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Merk.')
            elif 'Select_font_6' == call.data:  # and user_status[1] >= BOSS:
                user_data["font"] = "Salavat"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç Salavat.')
            # elif 'Select_font_7' == call.data and user_status[1] >= BOSS:
            #     user_data["font"] = "AlisaFont"
            #     bot.answer_callback_query(
            #         callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —à—Ä–∏—Ñ—Ç AlisaFont.')

        elif 'Select_color_font_work' in call.data:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ–ª–µ–≥–∏—è –≤—ã—à–µ VIP
            # print(call.data)
            # print(user_status[1])
            if 'Select_color_font_work_1' == call.data:  # and user_status[1] >= VIP:
                user_data["font_color"] = "65, 105, 225"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —Å–≤–µ—Ç–ª–æ —Å–∏–Ω–∏–π.')

            # –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
            elif 'Select_color_font_work_2' == call.data:
                user_data["font_color"] = "48, 75, 143"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —Å–∏–Ω–∏–π.')

            elif 'Select_color_font_work_3' == call.data:  # and user_status[1] >= Premium:
                user_data["font_color"] = "49, 88, 143"
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —Ç—ë–º–Ω–æ —Å–∏–Ω–∏–π —Ü–≤–µ—Ç.')

            elif 'Select_color_font_work_4' == call.data:  # and user_status[1] >= BOSS:
                user_data["font_color"] = "37, 37, 37"
                bot.answer_callback_query(
                    callback_query_id=call.id,
                    text='–û–∫–µ–π, –≤—ã–±—Ä–∞–Ω —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç.')

        elif 'Select_space' in call.data:
            # print("qwe")
            bot.answer_callback_query(callback_query_id=call.id, text='–í—ã–±–µ—Ä–∏ —à—Ä–∏—Ñ—Ç!')
        # user_status[1] == Admin:
        elif 'AdminPanel' in call.data and call.from_user.id == 420624020 or 569452912:
            # bot.delete_message(message.chat.id, message.message_id+1)
            if 'AdminPanel*UserEdit' == call.data:
                mess = bot.send_message(call.from_user.id, "–ù–∏–∫/id —ç—Ç–æ–≥–æ –≥—Ä–µ—à–Ω–∏–∫–∞ –º–Ω–µ!")
                bot.register_next_step_handler(mess, UserEdit)
            elif 'AdminPanel*User' in call.data:
                user_data = call.data.replace("AdminPanel*User*", "").split("*")
                # print(user_data)
                if user_data[0] == 'ChangeThePrivilege':
                    # if len(user_data) <= 2:
                    KB_Buy_in_message = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    cmd = types.InlineKeyboardButton(text="Standart",
                                                     callback_data=f"AdminPanel*User*BonusPrivilege*{user_data[1]}*1")
                    KB_Buy_in_message.add(cmd)
                    for i in slovar_:
                        # print(i)
                        cmd1 = types.InlineKeyboardButton(text=i,
                                                          callback_data=f"AdminPanel*User*BonusPrivilege*{user_data[1]}*{slovar_[i]['id']}")
                        KB_Buy_in_message.add(cmd1)
                    bot.send_message(call.from_user.id, "–ö–∞–∫—É—é –¥–∞–¥–∏–º?", reply_markup=KB_Buy_in_message)

    @bot.message_handler(content_types=['text'])
    def text(message):
        user_data = get_user_data(message.from_user)
        if message.text == '‚ùå–û—Ç–º–µ–Ω–∞‚ùå' or message.text == 'üåö–ù–∞–∑–∞–¥üåù':
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.delete_message(message.chat.id, message.message_id)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã—à–µ
            bot.delete_message(message.chat.id, message.message_id-1)
            bot.delete_message(message.chat.id, message.message_id-2)
            user_data['inputs_active'] = False
            mesu = '''„Ö§üí¨
üèÑ\n–í—ã–±–µ—Ä–∏ –ª—é–±–æ–π –ø—É–Ω–∫—Ç'''
            bot.send_message(message.from_user.id, mesu, reply_markup=Buttons.UserKB)
        elif user_data['inputs_active']:
            post_text(message)
        elif message.text == '‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å‚óÄÔ∏è':
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞—Ç—å
            bot.delete_message(message.chat.id, message.message_id)
            # –í–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –¥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data['list_type'] = default_list_type
            user_data['font_color'] = default_font_color
            guide = 'üìÉ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìÉ\nüóø–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤, —Å–µ–π—á–∞—Å —è –∂–¥—É —Ç–≤–æ–π –∫–æ–Ω—Å–ø–µ–∫—Ç.üóø\n‚¨áÔ∏è–ö—Å—Ç–∞—Ç–∏ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç –∏ —Ü–≤–µ—Ç –∏ –¥–∞–∂–µ —à—Ä–∏—Ñ—Ç.‚¨áÔ∏è'
            bot.send_message(message.from_user.id,
                             'üèÑüèΩ‚Äç‚ôÇÔ∏è', parse_mode='Markdown', reply_markup=Buttons.KB_print)
            bot.send_message(message.from_user.id,
                             guide, parse_mode='Markdown', reply_markup=Buttons.Select_list_type)  # UserKB)
            user_data['inputs_active'] = True

        elif message.text == 'üì∞–û —Å–µ—Ä–≤–∏—Å–µüì∞':
            about = ''' *–ê–≤—Ç–æ –∫–æ–Ω—Å–ø–µ–∫—Ç* _-_ –±–æ—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.
–°–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±—ã—Ç—å –æ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–π —Ä—É–∫–æ–π –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤,
–∏ –∑–∞–Ω—è—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –≤–µ—â–∞–º–∏.

–û —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –ø–∏—Å–∞—Ç—å: itsunrisetea@gmail.com
'''
            # –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: [@WT_Tini] @ssinnerr
            ops = '''üòßüï∂üëå
–¢–æ—Ç —Å–∞–º—ã–π –±–æ—Ç, —á–µ–∫–Ω–∏üòé
„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§üëá
'''
            URLS = f'https://t.me/share/url?text=https://t.me/Text_to_List_Bot?url={ops}'  # start=AK{message.from_user.id}
            ref = types.InlineKeyboardButton(
                text='üì£–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º', url=URLS)
            referal_KB = types.InlineKeyboardMarkup()
            referal_KB.add(ref)
            bot.send_message(message.from_user.id,
                             about, parse_mode='Markdown', reply_markup=referal_KB)
        else:
            bot.delete_message(message.chat.id, message.message_id)
            # print(bot.get_message(message.chat.id, message.message_id-1))
            bot.send_message(message.from_user.id,
                             '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!', reply_markup=Buttons.UserKB)

    def post_text(message):
        user_data = get_user_data(message.from_user)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        if user_data['last_time'] == 0:
            user_data['last_time'] = int(time.time())
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
        if int(time.time()) - user_data['last_time'] > 5:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
            user_data['last_time'] = time.time()
            # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data['all_text'] += ' ' + str(message.text)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
            user_data['last_time'] = int(time.time())
            # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data['all_text'] += ' ' + str(message.text)
        if user_data['text_true'] == False:
            user_data['last_time'] = int(time.time())
            user_data['text_true'] = True
            mass_gif = [
                os.path.join(BASE_DIR, 'GIF', 'grif.gif'),
                os.path.join(BASE_DIR, 'GIF', 'old_print.gif'),
                os.path.join(BASE_DIR, 'GIF', 'phone.gif'),
                os.path.join(BASE_DIR, 'GIF', 'sister.gif'),
                os.path.join(BASE_DIR, 'GIF', 'kit.gif'),
            ]
            gif = random.choice(mass_gif)
            user_data['gif'] = bot.send_video(
                message.from_user.id,
                open(gif, 'rb'), None,
                '–£–∂–µ –ø–∏—à—É...', reply_markup=Buttons.KB_print_none)
            magic(message)

    @thread
    def magic(message):
        while True:
            user_data = get_user_data(message.from_user)
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 —Å–µ–∫—É–Ω–¥
            if int(time.time()) - user_data['last_time'] > 5:
                CP = CreatePhoto(
                    path_save_image_folder=os.path.join(BASE_DIR, 'IMG'),
                    path_global_image_folder=os.path.join(BASE_DIR, 'PAGES'),

                    path_fonts_folder=os.path.join(BASE_DIR, 'Fonts'),
                    size=85,

                    text=user_data['all_text'],
                    user_id=message.from_user.id,
                    font_color=user_data['font_color'],
                    font_name=user_data['font'],
                    page_type=user_data['list_type'],
                )
                path = CP.create()
                # –ï—Å–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
                if len(path) == 1:
                    bot.send_photo(message.from_user.id, photo=open(path[0], 'rb'))
                else:
                    image_path = [InputMediaPhoto(open(i, 'rb')) for i in path]
                    # –ï—Å–ª–∏ –º–∞–ª–æ —Ñ–æ—Ç–æ–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
                    if len(path) <= 10:
                        bot.send_media_group(message.chat.id, media=image_path, timeout=10)
                    else:
                        # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                        zname = os.path.join(BASE_DIR, f'{message.from_user.id}.zip')
                        newzip = zipfile.ZipFile(zname, 'w')  # —Å–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
                        for foto in path:
                            newzip.write(foto, basename(foto))  # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
                        newzip.close()
                        if os.path.getsize(zname) > 49000000:
                            bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏ –Ω–æ —Ç–µ–∫—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ')
                            os.remove(zname)
                        else:
                            zip_file = open(zname, 'rb')
                            for i in range(5):
                                try:
                                    bot.send_document(message.chat.id, zip_file)
                                    break
                                except:
                                    pass
                            zip_file.close()
                        # del_img(zname)
                bot.send_message(message.from_user.id, '–ó–∞—Ö–æ—á–µ—à—å –µ—â—ë, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ‚ñ∂Ô∏è–ù–∞—á–∞—Ç—å‚óÄÔ∏è',
                                 reply_markup=Buttons.UserKB)
                # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
                del_img(path)
                # –£–¥–∞–ª—è–µ–º –≥–∏—Ñ–∫—É
                if user_data['gif'] != '':
                    bot.delete_message(message.from_user.id, user_data['gif'].message_id)
                user_data['text_true'] = False
                user_data['all_text'] = ''
                user_data['inputs_active'] = False
                break
            time.sleep(1)

    # @thread
    def del_img(path):
        # time.sleep(15)
        try:
            for i in path:
                # print('–£–¥–∞–ª–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É', i)
                os.remove(i)
        except Exception as e:
            print(e)

    bot.infinity_polling()  # none_stop=True,


if '__main__' == __name__:
    absFilePath = os.path.abspath(__file__)
    BASE_DIR = os.path.dirname(absFilePath)
    # –í –∫–æ–Ω—Ñ–∏–≥–µ –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å api_key –±–æ—Ç–∞
    # API_KEY=...
    load_dotenv(os.path.join(BASE_DIR, 'config.env'))
    main()
